import json
import os
from SCons.Script import Import  # type: ignore

Import("env")
current_env = env["PIOENV"]  # type: ignore # e.g., "dev" or "prod"

def bool_to_define(name, value):
    return f"#define {name} {1 if value else 0}"

def param_to_define(name, value):
    if isinstance(value, str):
        return f'#define {name} "{value}"'
    else:
        return f"#define {name} {value}"

def main():
    config_file = "config.json"

    try:
        with open(config_file, "r") as f:
            config = json.load(f)
    except Exception as e:
        print(f"❌ Failed to read {config_file}: {e}")
        return

    os.makedirs("include", exist_ok=True)
    output_path = os.path.join("include", "config.h")

    lines = []
    lines.append("/** This is auto-generated by generate_config.py, do not edit!")
    lines.append(f"   Generated {output_path} for '{current_env}' environment **/\n")
    lines.append("#ifndef CONFIG_H")
    lines.append("#define CONFIG_H")
    lines.append("")

    # Libraries section (top-level or in "libraries")
    libraries = config.get("libraries", config)
    for key, value in libraries.items():
        if isinstance(value, bool):
            lines.append(bool_to_define(key, value))

    lines.append("")

    # Parameters section
    all_params = config.get("parameters", {})
    selected_params = all_params.get(current_env, {})
    for key, value in selected_params.items():
        lines.append(param_to_define(key, value))

    lines.append("")
    lines.append("#endif // LIB_FLAGS_H\n")

    with open(output_path, "w") as f:
        f.write("\n".join(lines))

    print(f"✅ Generated {output_path} for '{current_env}' environment")

main()
